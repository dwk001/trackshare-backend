const e=new class{baseUrl;token=null;constructor(){this.baseUrl="/api",this.token=localStorage.getItem("auth_token")}async request(e,t={}){const s=`${this.baseUrl}${e}`,n={"Content-Type":"application/json",...t.headers};this.token&&(n.Authorization=`Bearer ${this.token}`);const r=await fetch(s,{...t,headers:n});if(!r.ok){const e=await r.json().catch(()=>({message:"Network error"}));throw new Error(e.message||`HTTP ${r.status}`)}return r.json()}async signIn(e){const t=await this.request("/auth/signin",{method:"POST",body:JSON.stringify(e)});return t.token&&(this.token=t.token,localStorage.setItem("auth_token",t.token)),t}async signUp(e){const t=await this.request("/auth/signup",{method:"POST",body:JSON.stringify(e)});return t.token&&(this.token=t.token,localStorage.setItem("auth_token",t.token)),t}async signOut(){try{await this.request("/auth/signout",{method:"POST"})}finally{this.token=null,localStorage.removeItem("auth_token")}}async getCurrentUser(){return this.request("/auth/me")}async updateProfile(e){return this.request("/auth/profile",{method:"PUT",body:JSON.stringify(e)})}async getTracks(e={}){const t=new URLSearchParams;return e.genre&&t.append("genre",e.genre),e.limit&&t.append("limit",e.limit.toString()),e.offset&&t.append("offset",e.offset.toString()),this.request(`/tracks?${t}`)}async searchTracks(e,t={}){const s=new URLSearchParams({q:e});return Object.entries(t).forEach(([e,t])=>{t&&s.append(e,t.toString())}),this.request(`/search?${s}`)}async getPosts(e={}){const t=new URLSearchParams;return e.feedType&&t.append("feedType",e.feedType),e.limit&&t.append("limit",e.limit.toString()),e.offset&&t.append("offset",e.offset.toString()),this.request(`/posts?${t}`)}async likePost(e){return this.request(`/posts/${e}/like`,{method:"POST"})}async sharePost(e){return this.request(`/posts/${e}/share`,{method:"POST"})}async getFriends(e="all"){return this.request(`/friends?type=${e}`)}async searchUsers(e){return this.request(`/friends?type=suggestions&q=${encodeURIComponent(e)}`)}async sendFriendRequest(e){return this.request("/friends",{method:"POST",body:JSON.stringify({user_id:e})})}async acceptFriendRequest(e){return this.request("/friends",{method:"PUT",body:JSON.stringify({friendship_id:e,action:"accept"})})}async declineFriendRequest(e){return this.request("/friends",{method:"PUT",body:JSON.stringify({friendship_id:e,action:"decline"})})}async removeFriend(e){return this.request(`/friends?friendship_id=${e}`,{method:"DELETE"})}};export{e as a};
