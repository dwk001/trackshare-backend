const t=new class{baseUrl;token=null;constructor(){this.baseUrl="/api",this.token=localStorage.getItem("auth_token")}async request(t,e={}){const s=`${this.baseUrl}${t}`,n={"Content-Type":"application/json",...e.headers};this.token&&(n.Authorization=`Bearer ${this.token}`);const r=await fetch(s,{...e,headers:n});if(!r.ok){const t=await r.json().catch(()=>({message:"Network error"}));throw new Error(t.message||`HTTP ${r.status}`)}return r.json()}async signIn(t){const e=await this.request("/auth/signin",{method:"POST",body:JSON.stringify(t)});return e.token&&(this.token=e.token,localStorage.setItem("auth_token",e.token)),e}async signUp(t){const e=await this.request("/auth/signup",{method:"POST",body:JSON.stringify(t)});return e.token&&(this.token=e.token,localStorage.setItem("auth_token",e.token)),e}async signOut(){try{await this.request("/auth/signout",{method:"POST"})}finally{this.token=null,localStorage.removeItem("auth_token")}}async getCurrentUser(){return this.request("/auth/me")}async updateProfile(t){return this.request("/auth/profile",{method:"PUT",body:JSON.stringify(t)})}async getTracks(t={}){const e=new URLSearchParams;return t.genre&&e.append("genre",t.genre),t.limit&&e.append("limit",t.limit.toString()),t.offset&&e.append("offset",t.offset.toString()),this.request(`/tracks?${e}`)}async searchTracks(t,e={}){const s=new URLSearchParams({q:t});return Object.entries(e).forEach(([t,e])=>{e&&s.append(t,e.toString())}),this.request(`/search?${s}`)}async getPosts(t={}){const e=new URLSearchParams;return t.feedType&&e.append("feedType",t.feedType),t.limit&&e.append("limit",t.limit.toString()),t.offset&&e.append("offset",t.offset.toString()),this.request(`/posts?${e}`)}async likePost(t){return this.request(`/posts/${t}/like`,{method:"POST"})}async sharePost(t){return this.request(`/posts/${t}/share`,{method:"POST"})}};export{t as a};
